from typing import List, Dict, Any

import spacy

from ChatBotAPI.core.logger_factory import get_logger

logger = get_logger()
class NLPService:
    def __init__(self):
        self.nlp = self._load_spacy_model()

    def _load_spacy_model(self):
        try:
            return spacy.load("en_core_news_lg")
        except OSError:
            logger.warning("Using fallback spaCy model")
            for model in ["en_core_news_md", "en_core_news_sm", "en_core_web_sm"]:
                try:
                    return spacy.load(model)
                except OSError:
                    continue
            raise RuntimeError("No suitable spaCy model found")

    # H√†m x·ª≠ l√Ω text s·ª≠ d·ª•ng spaCy
    def process_text(self, text: str) -> Dict[str, Any]:
        """
        X·ª≠ l√Ω text ƒë·∫ßu v√†o s·ª≠ d·ª•ng spaCy ƒë·ªÉ tr√≠ch xu·∫•t c√°c th·ª±c th·ªÉ c√≥ th·ªÉ l√† th√†nh ph·∫ßn m·ªπ ph·∫©m
        """
        doc = self.nlp(text)

        # Tr√≠ch xu·∫•t c√°c th·ª±c th·ªÉ c√≥ th·ªÉ l√† th√†nh ph·∫ßn m·ªπ ph·∫©m
        potential_ingredients = []

        # L·∫•y c√°c danh t·ª´ ri√™ng v√† c√°c danh t·ª´ chung
        for ent in doc.ents:
            if ent.label_ in ["PRODUCT", "SUBSTANCE", "CHEMICAL", "ORG", "MISC"]:
                potential_ingredients.append(ent.text)

        # L·∫•y th√™m c√°c c·ª•m danh t·ª´ c√≥ th·ªÉ l√† th√†nh ph·∫ßn
        for chunk in doc.noun_chunks:
            potential_ingredients.append(chunk.text)

        # Lo·∫°i b·ªè c√°c t·ª´ tr√πng l·∫∑p v√† l√†m s·∫°ch
        unique_ingredients = list(set(potential_ingredients))
        cleaned_ingredients = [ing.strip().lower() for ing in unique_ingredients if len(ing.strip()) > 2]

        # Ph√¢n t√≠ch √Ω ƒë·ªãnh c·ªßa ng∆∞·ªùi d√πng
        intent = "ingredient_info"  # Default intent

        # Ki·ªÉm tra c√°c t·ª´ kh√≥a ƒë·ªÉ x√°c ƒë·ªãnh intent
        dangerous_keywords = ["nguy hi·ªÉm", "ƒë·ªôc h·∫°i", "c√≥ h·∫°i", "t√°c d·ª•ng ph·ª•", "nguy h·∫°i"]
        safe_keywords = ["an to√†n", "l√†nh t√≠nh", "t·ªët cho da", "kh√¥ng ƒë·ªôc h·∫°i"]
        alternative_keywords = ["thay th·∫ø", "thay", "d√πng g√¨", "s·∫£n ph·∫©m kh√°c"]

        if any(keyword in text.lower() for keyword in dangerous_keywords):
            intent = "hazard_info"
        elif any(keyword in text.lower() for keyword in safe_keywords):
            intent = "safety_info"
        elif any(keyword in text.lower() for keyword in alternative_keywords):
            intent = "alternative_info"

        return {
            "ingredients": cleaned_ingredients,
            "intent": intent,
            "original_text": text
        }

    # H√†m t·∫°o c√¢u tr·∫£ l·ªùi
    def generate_response(self, intent: str, ingredients_data: List[Dict[str, Any]], original_query: str) -> str:
        """
        T·∫°o c√¢u tr·∫£ l·ªùi d·ª±a tr√™n intent v√† d·ªØ li·ªáu v·ªÅ th√†nh ph·∫ßn
        """
        if not ingredients_data:
            return "T√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ th√†nh ph·∫ßn m·ªπ ph·∫©m trong c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng cung c·∫•p t√™n c·ª• th·ªÉ c·ªßa th√†nh ph·∫ßn m·ªπ ph·∫©m b·∫°n mu·ªën t√¨m hi·ªÉu."

        response = ""

        if intent == "ingredient_info":
            response = f"T√¥i ƒë√£ t√¨m th·∫•y th√¥ng tin v·ªÅ {len(ingredients_data)} th√†nh ph·∫ßn m·ªπ ph·∫©m:\n\n"

            for idx, ingredient in enumerate(ingredients_data, 1):
                hazard_level = ingredient["hazard_level"]
                hazard_emoji = "üü¢" if hazard_level.lower() in ["an to√†n", "low",
                                                               "th·∫•p"] else "üü†" if hazard_level.lower() in [
                    "trung b√¨nh", "medium"] else "üî¥"

                response += f"{idx}. {hazard_emoji} {ingredient['name']} (M·ª©c ƒë·ªô nguy h·∫°i: {hazard_level})\n"
                response += f"   {ingredient['description']}\n"

                if ingredient.get("effects") and len(ingredient["effects"]) > 0:
                    response += f"   T√°c ƒë·ªông ti·ªÅm ·∫©n: {', '.join(ingredient['effects'])}\n"

                response += "\n"

        elif intent == "hazard_info":
            dangerous_ingredients = [ing for ing in ingredients_data if
                                     ing["hazard_level"].lower() in ["cao", "high", "trung b√¨nh", "medium"]]

            if dangerous_ingredients:
                response = f"Trong s·ªë c√°c th√†nh ph·∫ßn b·∫°n h·ªèi, c√≥ {len(dangerous_ingredients)} th√†nh ph·∫ßn c√≥ m·ª©c ƒë·ªô nguy h·∫°i ƒë√°ng ch√∫ √Ω:\n\n"

                for idx, ingredient in enumerate(dangerous_ingredients, 1):
                    hazard_level = ingredient["hazard_level"]
                    hazard_emoji = "üü†" if hazard_level.lower() in ["trung b√¨nh", "medium"] else "üî¥"

                    response += f"{idx}. {hazard_emoji} {ingredient['name']} (M·ª©c ƒë·ªô nguy h·∫°i: {hazard_level})\n"
                    response += f"   {ingredient['description']}\n"

                    if ingredient.get("effects") and len(ingredient["effects"]) > 0:
                        response += f"   T√°c ƒë·ªông ti·ªÅm ·∫©n: {', '.join(ingredient['effects'])}\n"

                    response += "\n"
            else:
                response = "T·ªët qu√°! C√°c th√†nh ph·∫ßn b·∫°n h·ªèi ƒë·ªÅu c√≥ m·ª©c ƒë·ªô nguy h·∫°i th·∫•p ho·∫∑c kh√¥ng c√≥ th√¥ng tin v·ªÅ t√°c ƒë·ªông ti√™u c·ª±c ƒë√°ng k·ªÉ."

        elif intent == "safety_info":
            safe_ingredients = [ing for ing in ingredients_data if
                                ing["hazard_level"].lower() in ["an to√†n", "low", "th·∫•p"]]

            if safe_ingredients:
                response = f"Trong s·ªë c√°c th√†nh ph·∫ßn b·∫°n h·ªèi, c√≥ {len(safe_ingredients)} th√†nh ph·∫ßn ƒë∆∞·ª£c ƒë√°nh gi√° l√† an to√†n:\n\n"

                for idx, ingredient in enumerate(safe_ingredients, 1):
                    response += f"{idx}. üü¢ {ingredient['name']} (M·ª©c ƒë·ªô nguy h·∫°i: {ingredient['hazard_level']})\n"
                    response += f"   {ingredient['description']}\n\n"
            else:
                response = "T√¥i kh√¥ng t√¨m th·∫•y th√†nh ph·∫ßn n√†o c√≥ m·ª©c ƒë·ªô an to√†n cao trong danh s√°ch b·∫°n h·ªèi. H√£y c√¢n nh·∫Øc t√¨m c√°c s·∫£n ph·∫©m thay th·∫ø."

        elif intent == "alternative_info":
            response = "D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë th√†nh ph·∫ßn thay th·∫ø an to√†n h∆°n:\n\n"

            for idx, ingredient in enumerate(ingredients_data, 1):
                if ingredient.get("alternatives") and len(ingredient["alternatives"]) > 0:
                    response += f"{idx}. Thay v√¨ {ingredient['name']} (M·ª©c ƒë·ªô nguy h·∫°i: {ingredient['hazard_level']}), b·∫°n c√≥ th·ªÉ t√¨m c√°c s·∫£n ph·∫©m ch·ª©a:\n"
                    response += f"   {', '.join(ingredient['alternatives'])}\n\n"
                else:
                    response += f"{idx}. V·ªõi {ingredient['name']} (M·ª©c ƒë·ªô nguy h·∫°i: {ingredient['hazard_level']}), hi·ªán ch∆∞a c√≥ th√¥ng tin v·ªÅ th√†nh ph·∫ßn thay th·∫ø.\n\n"

        # Th√™m l·ªùi khuy√™n chung
        response += "L∆∞u √Ω: Th√¥ng tin tr√™n ch·ªâ mang t√≠nh tham kh·∫£o. M·ªói ng∆∞·ªùi c√≥ th·ªÉ ph·∫£n ·ª©ng kh√°c nhau v·ªõi c√°c th√†nh ph·∫ßn m·ªπ ph·∫©m. N·∫øu b·∫°n c√≥ l√†n da nh·∫°y c·∫£m, h√£y tham kh·∫£o √Ω ki·∫øn c·ªßa b√°c sƒ© da li·ªÖu."

        return response
