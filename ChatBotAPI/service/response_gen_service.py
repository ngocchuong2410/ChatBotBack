"""
M√¥-ƒëun t·∫°o c√¢u tr·∫£ l·ªùi s·ª≠ d·ª•ng Jinja2 template engine
"""
import os
from typing import Dict, List, Any

from jinja2 import Environment, FileSystemLoader, BaseLoader, select_autoescape


class ResponseGenerator:
    """
    L·ªõp t·∫°o c√¢u tr·∫£ l·ªùi s·ª≠ d·ª•ng Jinja2 template engine
    """

    def __init__(self, templates_dir: str = None):
        """
        Kh·ªüi t·∫°o response generator v·ªõi Jinja2

        Args:
            templates_dir: Th∆∞ m·ª•c ch·ª©a c√°c template (t√πy ch·ªçn)
        """
        # N·∫øu c√≥ th∆∞ m·ª•c template, s·ª≠ d·ª•ng FileSystemLoader
        if templates_dir and os.path.exists(templates_dir):
            self.env = Environment(
                loader=FileSystemLoader(templates_dir),
                autoescape=select_autoescape(['html', 'xml']),
                trim_blocks=True,
                lstrip_blocks=True
            )
        # N·∫øu kh√¥ng, s·ª≠ d·ª•ng c√°c template ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a s·∫µn
        else:
            self.env = Environment(
                loader=BaseLoader(),
                trim_blocks=True,
                lstrip_blocks=True
            )
            # ƒêƒÉng k√Ω c√°c template tr·ª±c ti·∫øp
            self._register_templates()

        # ƒêƒÉng k√Ω c√°c filter t√πy ch·ªânh
        self.env.filters['get_hazard_emoji'] = self._get_hazard_emoji

    def _get_hazard_emoji(self, hazard_level: str) -> str:
        """
        Tr·∫£ v·ªÅ emoji t∆∞∆°ng ·ª©ng v·ªõi m·ª©c ƒë·ªô nguy h·∫°i

        Args:
            hazard_level: M·ª©c ƒë·ªô nguy h·∫°i

        Returns:
            Emoji t∆∞∆°ng ·ª©ng
        """
        if not hazard_level:
            return "‚ùì"

        hazard_level = hazard_level.lower()

        if hazard_level in ["an to√†n", "low", "th·∫•p"]:
            return "üü¢"
        elif hazard_level in ["trung b√¨nh", "medium"]:
            return "üü†"
        else:
            return "üî¥"

    def _register_templates(self):
        """
        ƒêƒÉng k√Ω c√°c template m·∫∑c ƒë·ªãnh
        """
        # Template cho tr∆∞·ªùng h·ª£p kh√¥ng t√¨m th·∫•y th√†nh ph·∫ßn
        self.env.from_string(
            "T√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ th√†nh ph·∫ßn m·ªπ ph·∫©m trong c√¢u h·ªèi c·ªßa b·∫°n. "
            "Vui l√≤ng cung c·∫•p t√™n c·ª• th·ªÉ c·ªßa th√†nh ph·∫ßn m·ªπ ph·∫©m b·∫°n mu·ªën t√¨m hi·ªÉu.",
        )

        # Template cho th√¥ng tin chung v·ªÅ th√†nh ph·∫ßn
        self.env.from_string("""
{%- if ingredients_data %}
T√¥i ƒë√£ t√¨m th·∫•y th√¥ng tin v·ªÅ {{ ingredients_data|length }} th√†nh ph·∫ßn m·ªπ ph·∫©m:

{% for ingredient in ingredients_data %}
{{ loop.index }}. {{ ingredient.hazard_level|get_hazard_emoji }} {{ ingredient.name }} (M·ª©c ƒë·ªô nguy h·∫°i: {{ ingredient.hazard_level }})
   {{ ingredient.description }}
{%- if ingredient.effects and ingredient.effects|length > 0 %}
   T√°c ƒë·ªông ti·ªÅm ·∫©n: {{ ingredient.effects|join(', ') }}
{%- endif %}

{% endfor %}
{%- endif %}

L∆∞u √Ω: Th√¥ng tin tr√™n ch·ªâ mang t√≠nh tham kh·∫£o. M·ªói ng∆∞·ªùi c√≥ th·ªÉ ph·∫£n ·ª©ng kh√°c nhau v·ªõi c√°c th√†nh ph·∫ßn m·ªπ ph·∫©m. N·∫øu b·∫°n c√≥ l√†n da nh·∫°y c·∫£m, h√£y tham kh·∫£o √Ω ki·∫øn c·ªßa b√°c sƒ© da li·ªÖu.
""")

        # Template cho th√¥ng tin v·ªÅ m·ª©c ƒë·ªô nguy h·∫°i
        self.env.from_string("""
{%- set dangerous_ingredients = [] %}
{%- for ing in ingredients_data %}
{%-   if ing.hazard_level|lower in ["cao", "high", "trung b√¨nh", "medium"] %}
{%-     set _ = dangerous_ingredients.append(ing) %}
{%-   endif %}
{%- endfor %}

{%- if dangerous_ingredients %}
Trong s·ªë c√°c th√†nh ph·∫ßn b·∫°n h·ªèi, c√≥ {{ dangerous_ingredients|length }} th√†nh ph·∫ßn c√≥ m·ª©c ƒë·ªô nguy h·∫°i ƒë√°ng ch√∫ √Ω:

{% for ingredient in dangerous_ingredients %}
{{ loop.index }}. {{ ingredient.hazard_level|get_hazard_emoji }} {{ ingredient.name }} (M·ª©c ƒë·ªô nguy h·∫°i: {{ ingredient.hazard_level }})
   {{ ingredient.description }}
{%- if ingredient.effects and ingredient.effects|length > 0 %}
   T√°c ƒë·ªông ti·ªÅm ·∫©n: {{ ingredient.effects|join(', ') }}
{%- endif %}

{% endfor %}
{%- else %}
T·ªët qu√°! C√°c th√†nh ph·∫ßn b·∫°n h·ªèi ƒë·ªÅu c√≥ m·ª©c ƒë·ªô nguy h·∫°i th·∫•p ho·∫∑c kh√¥ng c√≥ th√¥ng tin v·ªÅ t√°c ƒë·ªông ti√™u c·ª±c ƒë√°ng k·ªÉ.
{%- endif %}

L∆∞u √Ω: Th√¥ng tin tr√™n ch·ªâ mang t√≠nh tham kh·∫£o. M·ªói ng∆∞·ªùi c√≥ th·ªÉ ph·∫£n ·ª©ng kh√°c nhau v·ªõi c√°c th√†nh ph·∫ßn m·ªπ ph·∫©m. N·∫øu b·∫°n c√≥ l√†n da nh·∫°y c·∫£m, h√£y tham kh·∫£o √Ω ki·∫øn c·ªßa b√°c sƒ© da li·ªÖu.
""")

        # Template cho th√¥ng tin v·ªÅ an to√†n
        self.env.from_string("""
{%- set safe_ingredients = [] %}
{%- for ing in ingredients_data %}
{%-   if ing.hazard_level|lower in ["an to√†n", "low", "th·∫•p"] %}
{%-     set _ = safe_ingredients.append(ing) %}
{%-   endif %}
{%- endfor %}

{%- if safe_ingredients %}
Trong s·ªë c√°c th√†nh ph·∫ßn b·∫°n h·ªèi, c√≥ {{ safe_ingredients|length }} th√†nh ph·∫ßn ƒë∆∞·ª£c ƒë√°nh gi√° l√† an to√†n:

{% for ingredient in safe_ingredients %}
{{ loop.index }}. üü¢ {{ ingredient.name }} (M·ª©c ƒë·ªô nguy h·∫°i: {{ ingredient.hazard_level }})
   {{ ingredient.description }}

{% endfor %}
{%- else %}
T√¥i kh√¥ng t√¨m th·∫•y th√†nh ph·∫ßn n√†o c√≥ m·ª©c ƒë·ªô an to√†n cao trong danh s√°ch b·∫°n h·ªèi. H√£y c√¢n nh·∫Øc t√¨m c√°c s·∫£n ph·∫©m thay th·∫ø.
{%- endif %}

L∆∞u √Ω: Th√¥ng tin tr√™n ch·ªâ mang t√≠nh tham kh·∫£o. M·ªói ng∆∞·ªùi c√≥ th·ªÉ ph·∫£n ·ª©ng kh√°c nhau v·ªõi c√°c th√†nh ph·∫ßn m·ªπ ph·∫©m. N·∫øu b·∫°n c√≥ l√†n da nh·∫°y c·∫£m, h√£y tham kh·∫£o √Ω ki·∫øn c·ªßa b√°c sƒ© da li·ªÖu.
""")

        # Template cho th√¥ng tin v·ªÅ th√†nh ph·∫ßn thay th·∫ø
        self.env.from_string("""
D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë th√†nh ph·∫ßn thay th·∫ø an to√†n h∆°n:

{% for ingredient in ingredients_data %}
{{ loop.index }}. 
{%- if ingredient.alternatives and ingredient.alternatives|length > 0 %}
 Thay v√¨ {{ ingredient.name }} (M·ª©c ƒë·ªô nguy h·∫°i: {{ ingredient.hazard_level }}), b·∫°n c√≥ th·ªÉ t√¨m c√°c s·∫£n ph·∫©m ch·ª©a:
   {{ ingredient.alternatives|join(', ') }}
{%- else %}
 V·ªõi {{ ingredient.name }} (M·ª©c ƒë·ªô nguy h·∫°i: {{ ingredient.hazard_level }}), hi·ªán ch∆∞a c√≥ th√¥ng tin v·ªÅ th√†nh ph·∫ßn thay th·∫ø.
{%- endif %}

{% endfor %}

L∆∞u √Ω: Th√¥ng tin tr√™n ch·ªâ mang t√≠nh tham kh·∫£o. M·ªói ng∆∞·ªùi c√≥ th·ªÉ ph·∫£n ·ª©ng kh√°c nhau v·ªõi c√°c th√†nh ph·∫ßn m·ªπ ph·∫©m. N·∫øu b·∫°n c√≥ l√†n da nh·∫°y c·∫£m, h√£y tham kh·∫£o √Ω ki·∫øn c·ªßa b√°c sƒ© da li·ªÖu.
""")

    def generate_response(self, intent: str, ingredients_data: List[Dict[str, Any]], original_query: str) -> str:
        """
        T·∫°o c√¢u tr·∫£ l·ªùi d·ª±a tr√™n intent v√† d·ªØ li·ªáu v·ªÅ th√†nh ph·∫ßn

        Args:
            intent: Lo·∫°i √Ω ƒë·ªãnh c·ªßa ng∆∞·ªùi d√πng
            ingredients_data: Danh s√°ch th√¥ng tin v·ªÅ c√°c th√†nh ph·∫ßn
            original_query: C√¢u h·ªèi g·ªëc c·ªßa ng∆∞·ªùi d√πng

        Returns:
            C√¢u tr·∫£ l·ªùi ƒë∆∞·ª£c t·∫°o ra
        """
        if not ingredients_data:
            # S·ª≠ d·ª•ng template cho tr∆∞·ªùng h·ª£p kh√¥ng t√¨m th·∫•y
            template = self.env.get_template("not_found")
            return template.render()

        # X√°c ƒë·ªãnh template d·ª±a tr√™n intent
        template_name = intent
        if intent not in ["ingredient_info", "hazard_info", "safety_info", "alternative_info"]:
            template_name = "ingredient_info"  # Template m·∫∑c ƒë·ªãnh

        # L·∫•y template t∆∞∆°ng ·ª©ng
        template = self.env.get_template(template_name)

        # Render template v·ªõi d·ªØ li·ªáu
        return template.render(
            ingredients_data=ingredients_data,
            original_query=original_query
        )
